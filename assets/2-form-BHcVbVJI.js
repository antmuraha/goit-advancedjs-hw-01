var D=t=>{throw TypeError(t)};var F=(t,o,s)=>o.has(t)||D("Cannot "+s);var u=(t,o,s)=>(F(t,o,"read from private field"),s?s.call(t):o.get(t)),y=(t,o,s)=>o.has(t)?D("Cannot add the same private member more than once"):o instanceof WeakSet?o.add(t):o.set(t,s),g=(t,o,s,r)=>(F(t,o,"write to private field"),r?r.call(t,s):o.set(t,s),s);import"./modulepreload-polyfill-B5Qt9EMX.js";var f,m;class A{constructor(o,s){y(this,f);y(this,m);g(this,f,o==="local"?localStorage:sessionStorage),g(this,m,s)}save(o){const s=new FormData(o),r=Object.fromEntries(s.entries()),n={};for(const[l,i]of Object.entries(r))typeof i=="string"?n[l]=i.trim():console.warn(`Value for ${l} is not a string:`,i);u(this,f).setItem(u(this,m),JSON.stringify(n))}get(){const o=u(this,f).getItem(u(this,m));if(!o)return new FormData;try{const s=JSON.parse(o),r=new FormData;for(const[n,l]of Object.entries(s))r.append(n,l);return r}catch(s){console.error("Error parsing JSON",s)}return new FormData}clean(){u(this,f).removeItem(u(this,m))}}f=new WeakMap,m=new WeakMap;function S(t,o){const s=o.get(),r=Object.fromEntries(s.entries());for(const[n,l]of Object.entries(r)){const i=t.querySelector(`[name="${n}"]`);i&&"value"in i&&(i.value=l)}}function E(t){if(!t){console.error("Form not found");return}const o=t.getAttribute("action"),s=t.getAttribute("method"),r=t.getAttribute("enctype")||"multipart/form-data",n=t.getAttribute("data-validate-message")||"Please fill out this field",l=t.getAttribute("data-autosave")==="true",i=t.getAttribute("data-storage-type"),O=t.getAttribute("data-restore-key")||"form-data";if(!o){console.error("Form action not found");return}if(!s){console.error("Form method not found");return}const d=new A(i,O);S(t,d);function v(c,e=!1){e&&c.reset(),c.querySelectorAll("input, textarea").forEach(a=>{a.value||a.setCustomValidity(n)})}v(t);function b(c){console.log("Form submitted successfully");const e=new FormData(c),a=Object.fromEntries(e.entries());console.log("Form Data",a),d.clean(),v(c,!0)}t.addEventListener("submit",async c=>{c.preventDefault();const e=new FormData(t);try{(await fetch(o,{method:s,body:e,headers:{"Content-Type":r}})).ok&&b(t)}catch(a){console.log("Simulating successful data submission:",a),b(t)}}),t.addEventListener("input",c=>{var a,h,p;const e=c.target;if(!(e instanceof HTMLInputElement)&&!(e instanceof HTMLTextAreaElement)){console.error("Input not found or does not support validity");return}(a=e==null?void 0:e.validity)!=null&&a.valid?(e.setCustomValidity(""),e.classList.remove("error")):(h=e==null?void 0:e.validity)!=null&&h.valueMissing?e.setCustomValidity(n):(p=e==null?void 0:e.validity)!=null&&p.typeMismatch?(e.setCustomValidity(""),e.value?e.classList.add("error"):e.classList.remove("error")):e.setCustomValidity(""),l&&d.save(t)})}E(document.querySelector(".feedback-form"));
